# - *- coding: utf- 8 - *-
import telebot, sqlite3, time, datetime, requests, configparser, random
from telebot  import types, apihelper

config = configparser.ConfigParser()
config.read("settings.ini")
token    = config["tgbot"]["token"]
get_id   = config["tgbot"]["admin_id"]
admin_id = []
if "," in get_id:
	get_id = get_id.split(",")
	for a in get_id:
		admin_id.append(int(a))
else:
	try:
		admin_id = [int(get_id)]
	except ValueError:
		admin_id =[0]
		print("*****–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∞–¥–º–∏–Ω ID*****")

bot = telebot.TeleBot(token)

admin_keyboard = telebot.types.ReplyKeyboardMarkup(True)
admin_keyboard.row("üéÅ –ö—É–ø–∏—Ç—å", "‚ÑπÔ∏è FAQ")
admin_keyboard.row("üñç –ò–∑–º–µ–Ω–∏—Ç—å FAQ")
admin_keyboard.row("üìò –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", "üìô –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
admin_keyboard.row("üìó –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", "üìï –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã")
admin_keyboard.row("üîè –ò–∑–º–µ–Ω–∏—Ç—å QIWI –∫–æ—à–µ–ª—ë–∫", "üîê –ü—Ä–æ–≤–µ—Ä–∏—Ç—å QIWI –∫–æ—à–µ–ª—ë–∫")

user_keyboard = telebot.types.ReplyKeyboardMarkup(True)
user_keyboard.row("üéÅ –ö—É–ø–∏—Ç—å", "‚ÑπÔ∏è FAQ")
ignor_command = ["üéÅ –ö—É–ø–∏—Ç—å", "‚ÑπÔ∏è FAQ", "üñç –ò–∑–º–µ–Ω–∏—Ç—å FAQ", "üìò –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", "üìô –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", "üìó –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", "üìï –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã", "üîè –ò–∑–º–µ–Ω–∏—Ç—å QIWI –∫–æ—à–µ–ª—ë–∫", "üîê –ü—Ä–æ–≤–µ—Ä–∏—Ç—å QIWI –∫–æ—à–µ–ª—ë–∫"]
####################################################################################################
#–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ë–î, –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏, —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
with sqlite3.connect("shopBD.sqlite", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
	cur = con.cursor()
#–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
	try:
		cur.execute("SELECT * FROM items")
		print("DB was found(1/5)")
	except sqlite3.OperationalError:
		print("DB was not found(1/5)")
		cur.execute("CREATE TABLE items(id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, description TEXT, price INT, data TEXT)")
		print("DB 1 was created...")
#–ü—Ä–æ–≤–µ—Ä–∫–∞ FAQ
	try:
		cur.execute("SELECT * FROM faq")
	except sqlite3.OperationalError:
		print("DB was not found(2/5)")
		cur.execute("CREATE TABLE faq(infa TEXT)")
	row = cur.fetchone()
	if row == None:
		cur.execute("DROP TABLE faq")
		cur.execute("CREATE TABLE faq(infa TEXT)")
		cur.execute("INSERT INTO faq VALUES(' –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ò–∑–º–µ–Ω–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.')")
		print("DB 2 was created...")
	else:
		print("DB was found(2/5)")
#–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∏–≤–∏
	try:
		cur.execute("SELECT * FROM qiwi")
	except sqlite3.OperationalError:
		print("DB was not found(3/5)")
		cur.execute("CREATE TABLE qiwi(login TEXT, token TEXT)")
	row = cur.fetchone()
	if row == None:
		cur.executemany("INSERT INTO qiwi(login, token) VALUES (?, ?)", [("nomer", "token")])
		print("DB 3 was created...")
	else:
		print("DB was found(3/5)")
#–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–æ–ª–Ω–∏–≤—à–∏—Ö
	try:
		cur.execute("SELECT * FROM buyers")
		print("DB was found(4/5)")
	except sqlite3.OperationalError:
		print("DB was not found(4/5)")
		cur.execute("CREATE TABLE buyers(users TEXT, iditem TEXT, comment TEXT, amount TEXT, receipt TEXT, randomnum, data TEXT)")
		print("DB 4 was created...")
#–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	try:
		cur.execute("SELECT * FROM users")
		print("DB was found(5/5)")
	except sqlite3.OperationalError:
		print("DB was not found(5/5)")
		cur.execute("CREATE TABLE users(userid INTEGER, username TEXT)")
		print("DB 5 was created...")
if con:
	con.close()
####################################################################################################
@bot.message_handler(commands=["userlist"])
def listUsers(message):
	if message.from_user.id in admin_id:
		with sqlite3.connect("shopBD.sqlite", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
			cur = con.cursor()
			usID = []
			usName = []
			cur.execute("SELECT * FROM users")
			while True:
				row = cur.fetchone()
				if row == None:
					break
				usID.append(row[0])
				usName.append(row[1])
			text = ""
			for z in range(len(usID)):				
				text = "{0}\n{1}. @{2} (`{3}`)".format(text, z+1, usName[z], usID[z])			
			bot.send_message(message.from_user.id, text, parse_mode = "MARKDOWN")
		if con:
			con.close()
@bot.message_handler(commands=["ad"])
def adMessage(message):
	if message.from_user.id in admin_id:
		try:
			bot.send_message(message.from_user.id, "üìò –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥—ã –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:\n`*–¢–µ–∫—Å—Ç*` ‚Äî *–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç*\n`_–¢–µ–∫—Å—Ç_` ‚Äî _–ù–∞–∫–ª–æ–Ω—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç_\n`[–¢–µ–∫—Å—Ç](URL)` ‚Äî [Google](google.com)",parse_mode="MARKDOWN")
			bot.register_next_step_handler(message, newAd)
		except requests.exceptions.ConnectionError:
			bot.send_message(message.from_user.id, "üìò –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥—ã –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:\n`*–¢–µ–∫—Å—Ç*` ‚Äî *–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç*\n`_–¢–µ–∫—Å—Ç_` ‚Äî _–ù–∞–∫–ª–æ–Ω—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç_\n`[–¢–µ–∫—Å—Ç](URL)` ‚Äî [Google](google.com)",parse_mode="MARKDOWN")
			bot.register_next_step_handler(message, newAd)	

@bot.message_handler(commands=["start"])
def start_message(message):
	#
	with sqlite3.connect("shopBD.sqlite", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
		cur = con.cursor()
		try:
			cur.execute("SELECT * FROM users WHERE userid = " + str(message.from_user.id) + "")
			row = cur.fetchall()
			if len(row) == 0:
				try:
					print("1. INSERT INTO users(userid,username) VALUES(" + str(message.from_user.id) + ",'" + message.from_user.username + "')")
					cur.execute("INSERT INTO users(userid,username) VALUES(" + str(message.from_user.id) + ",'" + message.from_user.username + "')")
				except requests.exceptions.ConnectionError:
					print("2. INSERT INTO users(userid,username) VALUES(" + str(message.from_user.id) + ",'" + message.from_user.username + "')")
					cur.execute("INSERT INTO users(userid,username) VALUES(" + str(message.from_user.id) + ",'" + message.from_user.username + "')")
		except requests.exceptions.ConnectionError:
			cur.execute("SELECT * FROM users WHERE userid = " + str(message.from_user.id) + "")
			row = cur.fetchall()
			if len(row) == 0:
				try:
					print("3. INSERT INTO users(userid,username) VALUES(" + str(message.from_user.id) + ",'" + message.from_user.username + "')")
					cur.execute("INSERT INTO users(userid,username) VALUES(" + str(message.from_user.id) + ",'" + message.from_user.username + "')")
				except requests.exceptions.ConnectionError:
					print("4. INSERT INTO users(userid,username) VALUES(" + str(message.from_user.id) + ",'" + message.from_user.username + "')")
					cur.execute("INSERT INTO users(userid,username) VALUES(" + str(message.from_user.id) + ",'" + message.from_user.username + "')")
	if con:
		con.close()
	#call.from_user.username
	if message.from_user.id in admin_id:
		try:
			bot.send_message(message.chat.id, "üîπ –†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å –≤ –º–∞–≥–∞–∑–∏–Ω–µ KiaCode Shop. üîπ\n–ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –≤–≤–µ–¥–∏—Ç–µ /start", reply_markup = admin_keyboard)
		except requests.exceptions.ConnectionError:
			bot.send_message(message.chat.id, "üîπ –†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å –≤ –º–∞–≥–∞–∑–∏–Ω–µ KiaCode Shop. üîπ\n–ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –≤–≤–µ–¥–∏—Ç–µ /start", reply_markup = admin_keyboard)
	else:
		try:
			bot.send_message(message.chat.id, "üîπ –†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å –≤ –º–∞–≥–∞–∑–∏–Ω–µ KiaCode Shop. üîπ\n–ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –≤–≤–µ–¥–∏—Ç–µ /start", reply_markup = user_keyboard)
		except requests.exceptions.ConnectionError:
			bot.send_message(message.chat.id, "üîπ –†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å –≤ –º–∞–≥–∞–∑–∏–Ω–µ KiaCode Shop. üîπ\n–ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –≤–≤–µ–¥–∏—Ç–µ /start", reply_markup = user_keyboard)

@bot.message_handler(content_types=["text"])
def send_text(message):
	idss = []
	name = []
	if message.text == "üéÅ –ö—É–ø–∏—Ç—å":
		with sqlite3.connect("shopBD.sqlite", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
			cur = con.cursor()
			keyboard = types.InlineKeyboardMarkup()
			cur.execute("SELECT * FROM items")
			row = cur.fetchall()
			for i in row:
				idss.append(i[0])
				name.append(i[1])
			x = 0
			if len(idss) >= 1:
				with sqlite3.connect("shopBD.sqlite", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
					cur = con.cursor()
					cur.execute("SELECT * FROM items")
					while True:
						x += 1
						row = cur.fetchone()
						if row == None:
							break
						if x <= 5:
							keyboard.add(types.InlineKeyboardButton(text = (str(row[1]) + " - " + str(row[3]) + " —Ä—É–±"), callback_data = "b_select_item_" + str(row[0]) + "|0"))
				if len(idss) > 5:
					keyboard.add(types.InlineKeyboardButton(text = "‚û°Ô∏è–î–∞–ª–µ–µ‚û°Ô∏è", callback_data = "b_nextPage|5"))
				try:
					bot.send_message(message.chat.id, "üéÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä", reply_markup = keyboard)
				except requests.exceptions.ConnectionError:
					bot.send_message(message.chat.id, "üéÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä", reply_markup = keyboard)
			else:
				try:
					bot.send_message(message.chat.id, "üéÅ –ò–∑–≤–∏–Ω—è–µ–º—Å—è, –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Ç–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup = keyboard)
				except requests.exceptions.ConnectionError:
					bot.send_message(message.chat.id, "üéÅ –ò–∑–≤–∏–Ω—è–µ–º—Å—è, –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Ç–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup = keyboard)
	elif message.text == "‚ÑπÔ∏è FAQ":
		with sqlite3.connect("shopBD.sqlite", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
			cur = con.cursor()
			cur.execute("SELECT * FROM faq")
			row = cur.fetchall()
		try:
			bot.send_message(message.chat.id, row[0])
		except requests.exceptions.ConnectionError:
			bot.send_message(message.chat.id, row[0])
	elif message.text == "üîê –ü—Ä–æ–≤–µ—Ä–∏—Ç—å QIWI –∫–æ—à–µ–ª—ë–∫":
		with sqlite3.connect("shopBD.sqlite", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
			cur = con.cursor()
			cur.execute("SELECT * FROM qiwi")
			checkQiwi = cur.execute("SELECT * FROM qiwi").fetchall()[0]
		request = requests.Session()
		request.headers["authorization"] = "Bearer " + checkQiwi[1]
		parameters = {"rows": 5, "operation" : "IN"}
		selectQiwi = request.get("https://edge.qiwi.com/payment-history/v2/persons/" + checkQiwi[0] + "/payments", params = parameters)
		if selectQiwi.status_code == 200:
			try:
				bot.send_message(message.from_user.id, "‚úÖ QIWI –∫–æ—à–µ–ª—ë–∫ `" + checkQiwi[0] + "` –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç\nü•ù –¢–æ–∫–µ–Ω: `"+ checkQiwi[1] +"`", parse_mode = "MARKDOWN")
			except requests.exceptions.ConnectionError:
				bot.send_message(message.from_user.id, "‚úÖ QIWI –∫–æ—à–µ–ª—ë–∫ `" + checkQiwi[0] + "` –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç\nü•ù –¢–æ–∫–µ–Ω: `"+ checkQiwi[1] +"`", parse_mode = "MARKDOWN")
		else:
			try:
				bot.send_message(message.from_user.id, "‚ùóÔ∏è  QIWI –∫–æ—à–µ–ª—ë–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –µ–≥–æ –∑–∞–º–µ–Ω–∏—Ç–µ")
			except requests.exceptions.ConnectionError:
				bot.send_message(message.from_user.id, "‚ùóÔ∏è  QIWI –∫–æ—à–µ–ª—ë–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –µ–≥–æ –∑–∞–º–µ–Ω–∏—Ç–µ")
	elif message.text == "üñç –ò–∑–º–µ–Ω–∏—Ç—å FAQ":
		try:
			bot.send_message(message.from_user.id, "üîò –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è FAQ")
			bot.register_next_step_handler(message, change_faq)
		except requests.exceptions.ConnectionError:
			bot.send_message(message.from_user.id, "üîò –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è FAQ")
			bot.register_next_step_handler(message, change_faq)
	elif message.text == "üìò –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä":
		try:
			bot.send_message(message.from_user.id, "üìò –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
			bot.register_next_step_handler(message, add_item_name)
		except requests.exceptions.ConnectionError:
			bot.send_message(message.from_user.id, "üìò –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
			bot.register_next_step_handler(message, add_item_name)
	elif message.text == "üìó –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã":
		try:
			bot.send_message(message.from_user.id, "üìó –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤")
			bot.register_next_step_handler(message, add_items_name)
		except requests.exceptions.ConnectionError:
			bot.send_message(message.from_user.id, "üìó –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤")
			bot.register_next_step_handler(message, add_items_name)
	elif message.text == "üìô –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä":
		with sqlite3.connect("shopBD.sqlite", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
			cur = con.cursor()
			keyboard = types.InlineKeyboardMarkup()
			cur.execute("SELECT * FROM items")
			row = cur.fetchall()
			for i in row:
				idss.append(i[0])
				name.append(i[1])
			x = 0
			if len(idss) >= 1:
				with sqlite3.connect("shopBD.sqlite", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
					cur = con.cursor()
					cur.execute("SELECT * FROM items")
					while True:
						x += 1
						row = cur.fetchone()
						if row == None:
							break
						if x <= 10:
							keyboard.add(types.InlineKeyboardButton(text = (str(row[1]) + " - " + str(row[3]) + " —Ä—É–±"), callback_data = "r_select_item_" + str(row[0]) + "|0"))
				if len(idss) > 10:
					keyboard.add(types.InlineKeyboardButton(text = "‚û°Ô∏è–î–∞–ª–µ–µ‚û°Ô∏è", callback_data = "r_nextPage|10"))
				try:
					bot.send_message(message.chat.id, "üéÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ", reply_markup = keyboard)
				except requests.exceptions.ConnectionError:
					bot.send_message(message.chat.id, "üéÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ", reply_markup = keyboard)
			else:
				try:
					bot.send_message(message.chat.id, "üéÅ –¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup = keyboard)
				except requests.exceptions.ConnectionError:
					bot.send_message(message.chat.id, "üéÅ –¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup = keyboard)
	elif message.text == "üìï –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã":
		keyboard = types.InlineKeyboardMarkup()
		yes_key = types.InlineKeyboardButton(text = "‚ùå –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data = "r_yes_del_all_item_")
		no_key  = types.InlineKeyboardButton(text = "‚úÖ –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data = "r_no_del_all_item_")
		keyboard.add(yes_key, no_key)
		bot.send_message(message.from_user.id, "üìï –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup = keyboard)
	elif message.text == "üîè –ò–∑–º–µ–Ω–∏—Ç—å QIWI –∫–æ—à–µ–ª—ë–∫":
		try:
			bot.send_message(message.from_user.id, "ü•ù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä QIWI –∫–æ—à–µ–ª—å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `+79200000000`", parse_mode = "MARKDOWN")
			bot.register_next_step_handler(message, change_qiwi_number)
		except requests.exceptions.ConnectionError:
			bot.send_message(message.from_user.id, "ü•ù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä QIWI –∫–æ—à–µ–ª—å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `+79200000000`", parse_mode = "MARKDOWN")
			bot.register_next_step_handler(message, change_qiwi_number)
####################################################################################################

@bot.callback_query_handler(func = lambda call:True)
def callback_inline(call):
	idss 	= []
	name 	= []
	amounts = []
	try:
		remover = call.data.split("|")
		remover = int(remover[1])
		if remover < 0:
			remover = 0
	except:
		pass
####################################################################################################
#–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
	if call.data == "r_nextPage|" + str(remover):
		with sqlite3.connect("shopBD.sqlite", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
			cur = con.cursor()
			keyboard = types.InlineKeyboardMarkup()
			cur.execute("SELECT * FROM items")
			while True:
				row = cur.fetchone()
				if row == None:
					break
				idss.append(row[0])
				name.append(row[1])
				amounts.append(row[3])
			try:
				x = 0
				for a in range(remover, len(idss)):
					if x < 10:
						keyboard.add(types.InlineKeyboardButton(text = (str(name[a]) + " - " + str(amounts[a]) + " —Ä—É–±"), callback_data = "r_select_item_" + str(idss[a]) + "|" + str(remover)))
					x += 1
				if remover + 9 >= len(idss):
					keyboard.add(types.InlineKeyboardButton(text = "‚¨ÖÔ∏è–ù–∞–∑–∞–¥‚¨ÖÔ∏è", callback_data = "r_previousPage|" + str(remover - 10)))
				else:
					next_keyboard = types.InlineKeyboardButton(text = "‚û°Ô∏è–î–∞–ª–µ–µ‚û°Ô∏è", callback_data = "r_nextPage|" + str(remover + 10))
					number_keyboard = types.InlineKeyboardButton(text = str(remover)[:1], callback_data = ".....")
					previous_keyboard = types.InlineKeyboardButton(text = "‚¨ÖÔ∏è–ù–∞–∑–∞–¥‚¨ÖÔ∏è", callback_data = "r_previousPage|" + str(remover - 10))
					keyboard.add(previous_keyboard, number_keyboard, next_keyboard)
				try:
					bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = "üéÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ",
									reply_markup = keyboard)
				except requests.exceptions.ConnectionError:
					bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = "üéÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ",
									reply_markup = keyboard)
			except IndexError:
				pass
		if con:
			con.close()
	elif call.data == "r_previousPage|" + str(remover):
		with sqlite3.connect("shopBD.sqlite", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
			cur = con.cursor()
			keyboard = types.InlineKeyboardMarkup()
			cur.execute("SELECT * FROM items")
			while True:
				row = cur.fetchone()
				if row == None:
					break
				idss.append(row[0])
				name.append(row[1])
				amounts.append(row[3])
			try:
				x = 0
				for a in range(remover, len(idss)):
					if x < 10:
						keyboard.add(types.InlineKeyboardButton(text = (str(name[a]) + " - " + str(amounts[a]) + " —Ä—É–±"), callback_data = "r_select_item_" + str(idss[a]) + "|" + str(remover)))
					x += 1
				if remover <= 0:
					keyboard.add(types.InlineKeyboardButton(text = "‚û°Ô∏è–î–∞–ª–µ–µ‚û°Ô∏è", callback_data = "r_nextPage|" + str(remover + 10)))
				else:
					next_keyboard = types.InlineKeyboardButton(text = "‚û°Ô∏è–î–∞–ª–µ–µ‚û°Ô∏è", callback_data = "r_nextPage|" + str(remover + 10))
					number_keyboard = types.InlineKeyboardButton(text = str(remover)[:1], callback_data = ".....")
					previous_keyboard = types.InlineKeyboardButton(text = "‚¨ÖÔ∏è–ù–∞–∑–∞–¥‚¨ÖÔ∏è", callback_data = "r_previousPage|" + str(remover - 10))
					keyboard.add(previous_keyboard, number_keyboard, next_keyboard)
				try:
					bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = "üéÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ",
						reply_markup = keyboard)
				except requests.exceptions.ConnectionError:
					bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = "üéÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ",
						reply_markup = keyboard)
			except IndexError:
				pass
		if con:
			con.close()
	elif "r_select_item_" in call.data:
		msg = call.data[14:]
		msg = msg.split("|")
		remover = msg[1]
		msg = int(msg[0])
		with sqlite3.connect("shopBD.sqlite", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
			cur = con.cursor()
			cur.execute("SELECT * FROM items")
			while True:
				row = cur.fetchone()
				if row == None:
					break
				if row[0] == msg:
					keyboard = types.InlineKeyboardMarkup()
					keyboard.add(types.InlineKeyboardButton(text = "üìô –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data = "r_del_item_" + str(row[0])))
					keyboard.add(types.InlineKeyboardButton(text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data = "r_list_back_" + remover))
					try:
						bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = "üè∑ *–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:* `{0}`\nüíµ *–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞:* `{1}`\nüìú *–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:* `{2}`\nüíæ *–î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞:* `{3}`".format(row[1], row[3], row[2], row[4]),
							reply_markup = keyboard, parse_mode = "MARKDOWN")
					except requests.exceptions.ConnectionError:
						bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = "üè∑ *–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:* `{0}`\nüíµ *–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞:* `{1}`\nüìú *–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:* `{2}`\nüíæ *–î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞:* `{3}`".format(row[1], row[3], row[2], row[4]),
							reply_markup = keyboard, parse_mode = "MARKDOWN")
		if con:
			con.close()
	elif "r_list_back_" in call.data:
		remover = int(call.data[12:])
		with sqlite3.connect("shopBD.sqlite", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
			cur = con.cursor()
			keyboard = types.InlineKeyboardMarkup()
			cur.execute("SELECT * FROM items")
			while True:
				row = cur.fetchone()
				if row == None:
					break
				idss.append(row[0])
				name.append(row[1])
				amounts.append(row[3])
			try:
				x = 0
				for a in range(remover, len(idss)):
					if x < 10:
						keyboard.add(types.InlineKeyboardButton(text = (str(name[a]) + " - " + str(amounts[a]) + " —Ä—É–±"), callback_data = "r_select_item_" + str(idss[a]) + "|" + str(remover)))
					x += 1
				if remover <= 0 and len(idss) >= 10:
					keyboard.add(types.InlineKeyboardButton(text = "‚û°Ô∏è–î–∞–ª–µ–µ‚û°Ô∏è", callback_data = "r_nextPage|" + str(remover + 10)))
				elif remover <= 0 and len(idss) <= 10:
					pass
				elif remover + 9 >= len(idss):
					keyboard.add(types.InlineKeyboardButton(text = "‚¨ÖÔ∏è–ù–∞–∑–∞–¥‚¨ÖÔ∏è", callback_data = "r_previousPage|" + str(remover - 10)))
				elif remover >= 10 and len(idss) >= 10:
					next_keyboard = types.InlineKeyboardButton(text = "‚û°Ô∏è–î–∞–ª–µ–µ‚û°Ô∏è", callback_data = "r_nextPage|" + str(remover + 10))
					number_keyboard = types.InlineKeyboardButton(text = str(remover)[:1], callback_data = ".....")
					previous_keyboard = types.InlineKeyboardButton(text = "‚¨ÖÔ∏è–ù–∞–∑–∞–¥‚¨ÖÔ∏è", callback_data = "r_previousPage|" + str(remover - 10))
					keyboard.add(previous_keyboard, number_keyboard, next_keyboard)
				try:
					bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = "üéÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ",
									reply_markup = keyboard)
				except requests.exceptions.ConnectionError:
					bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = "üéÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ",
									reply_markup = keyboard)
			except IndexError:
				pass
		if con:
			con.close()
	elif "r_no_del_all_item_" in call.data:
		try:
			bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = "üìï –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤.")
		except requests.exceptions.ConnectionError:
			bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = "üìï –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤.")
	elif "r_yes_del_all_item_" in call.data:
		with sqlite3.connect("shopBD.sqlite") as con:
			cur = con.cursor()
			all_items = cur.execute("SELECT * FROM items").fetchall()
			x = 0
			for row in all_items:
				cur.execute("DELETE FROM items WHERE id = ?", (row[0],))
				con.commit()
				x += 1
			try:
				bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = "üìï –ë—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ `{0}` —Ç–æ–≤–∞—Ä–æ–≤.".format(x), parse_mode = "MARKDOWN")
			except requests.exceptions.ConnectionError:
				bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = "üìï –ë—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ `{0}` —Ç–æ–≤–∞—Ä–æ–≤.".format(x), parse_mode = "MARKDOWN")
		if con:
			con.close()
	elif "r_del_item_" in call.data:
		msg = int(call.data[11:])
		with sqlite3.connect("shopBD.sqlite", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
			cur = con.cursor()
			cur.execute("DELETE FROM items WHERE id = ?", (msg,))
			con.commit()
		if con:
			con.close()
		try:
			bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = "‚úÖ –¢–æ–≤–∞—Ä –±—ã–ª —É–¥–∞–ª—ë–Ω.")
		except requests.exceptions.ConnectionError:
			bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = "‚úÖ –¢–æ–≤–∞—Ä –±—ã–ª —É–¥–∞–ª—ë–Ω.")
####################################################################################################
#–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
	elif call.data == "b_nextPage|" + str(remover):
		with sqlite3.connect("shopBD.sqlite", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
			cur = con.cursor()
			keyboard = types.InlineKeyboardMarkup()
			cur.execute("SELECT * FROM items")
			while True:
				row = cur.fetchone()
				if row == None:
					break
				idss.append(row[0])
				name.append(row[1])
				amounts.append(row[3])
			try:
				x = 0
				for a in range(remover, len(idss)):
					if x < 5:
						keyboard.add(types.InlineKeyboardButton(text = (str(name[a]) + " - " + str(amounts[a]) + " —Ä—É–±"), callback_data = "b_select_item_" + str(idss[a]) + "|" + str(remover)))
					x += 1
				if remover + 4 >= len(idss):
					keyboard.add(types.InlineKeyboardButton(text = "‚¨ÖÔ∏è–ù–∞–∑–∞–¥‚¨ÖÔ∏è", callback_data = "b_previousPage|" + str(remover - 5)))
				else:
					next_keyboard = types.InlineKeyboardButton(text = "‚û°Ô∏è–î–∞–ª–µ–µ‚û°Ô∏è", callback_data = "b_nextPage|" + str(remover + 5))
					number_keyboard = types.InlineKeyboardButton(text = str(remover)[:1], callback_data = ".....")
					previous_keyboard = types.InlineKeyboardButton(text = "‚¨ÖÔ∏è–ù–∞–∑–∞–¥‚¨ÖÔ∏è", callback_data = "b_previousPage|" + str(remover - 5))
					keyboard.add(previous_keyboard, number_keyboard, next_keyboard)
				try:
					bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = "üéÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä: ",
									reply_markup = keyboard)
				except requests.exceptions.ConnectionError:
					bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = "üéÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä: ",
									reply_markup = keyboard)
			except IndexError:
				pass
		if con:
			con.close()
	elif call.data == "b_previousPage|" + str(remover):
		with sqlite3.connect("shopBD.sqlite", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
			cur = con.cursor()
			keyboard = types.InlineKeyboardMarkup()
			cur.execute("SELECT * FROM items")
			while True:
				row = cur.fetchone()
				if row == None:
					break
				idss.append(row[0])
				name.append(row[1])
				amounts.append(row[3])
			try:
				x = 0
				for a in range(remover, len(idss)):
					if x < 5:
						keyboard.add(types.InlineKeyboardButton(text = (str(name[a]) + " - " + str(amounts[a]) + " —Ä—É–±"), callback_data = "b_select_item_" + str(idss[a]) + "|" + str(remover)))
					x += 1
				if remover <= 0:
					keyboard.add(types.InlineKeyboardButton(text = "‚û°Ô∏è–î–∞–ª–µ–µ‚û°Ô∏è", callback_data = "b_nextPage|" + str(remover + 5)))
				else:
					next_keyboard = types.InlineKeyboardButton(text = "‚û°Ô∏è–î–∞–ª–µ–µ‚û°Ô∏è", callback_data = "b_nextPage|" + str(remover + 5))
					number_keyboard = types.InlineKeyboardButton(text = str(remover)[:1], callback_data = ".....")
					previous_keyboard = types.InlineKeyboardButton(text = "‚¨ÖÔ∏è–ù–∞–∑–∞–¥‚¨ÖÔ∏è", callback_data = "b_previousPage|" + str(remover - 5))
					keyboard.add(previous_keyboard, number_keyboard, next_keyboard)
				try:
					bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = "üéÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä: ",
									reply_markup = keyboard)
				except requests.exceptions.ConnectionError:
					bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = "üéÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä: ",
									reply_markup = keyboard)
			except IndexError:
				pass
		if con:
			con.close()
	elif "b_select_item_" in call.data:
		msg = call.data[14:]
		msg = msg.split("|")
		remover = msg[1]
		msg = int(msg[0])
		with sqlite3.connect("shopBD.sqlite", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
			cur = con.cursor()
			cur.execute("SELECT * FROM items")
			while True:
				row = cur.fetchone()
				if row == None:
					break
				if row[0] == msg:
					keyboard = types.InlineKeyboardMarkup()
					keyboard.add(types.InlineKeyboardButton(text = "üí∞ –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data = "buy_item_" + str(row[0])))
					keyboard.add(types.InlineKeyboardButton(text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data = "b_list_back_" + remover))
					try:
						bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = "üè∑ *–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:* `{0}`\nüíµ *–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞:* `{1}`\nüìú *–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:* `{2}`".format(row[1], row[3], row[2]),
							reply_markup = keyboard, parse_mode = "MARKDOWN")
					except requests.exceptions.ConnectionError:
						bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = "üè∑ *–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:* `{0}`\nüíµ *–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞:* `{1}`\nüìú *–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:* `{2}`".format(row[1], row[3], row[2]),
							reply_markup = keyboard, parse_mode = "MARKDOWN")
		if con:
			con.close()
	elif "b_list_back_" in call.data:
		remover = int(call.data[12:])
		with sqlite3.connect("shopBD.sqlite", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
			cur = con.cursor()
			keyboard = types.InlineKeyboardMarkup()
			cur.execute("SELECT * FROM items")
			while True:
				row = cur.fetchone()
				if row == None:
					break
				idss.append(row[0])
				name.append(row[1])
				amounts.append(row[3])
			try:
				x = 0
				for a in range(remover, len(idss)):
					if x < 5:
						keyboard.add(types.InlineKeyboardButton(text = (str(name[a]) + " - " + str(amounts[a]) + " —Ä—É–±"), callback_data = "b_select_item_" + str(idss[a]) + "|" + str(remover)))
					x += 1
				if remover <= 0 and len(idss) >= 5:
					keyboard.add(types.InlineKeyboardButton(text = "‚û°Ô∏è–î–∞–ª–µ–µ‚û°Ô∏è", callback_data = "b_nextPage|" + str(remover + 5)))
				elif remover <= 0 and len(idss) <= 5:
					pass
				elif remover + 4 >= len(idss):
					keyboard.add(types.InlineKeyboardButton(text = "‚¨ÖÔ∏è–ù–∞–∑–∞–¥‚¨ÖÔ∏è", callback_data = "b_previousPage|" + str(remover - 5)))
				elif remover >= 5 and len(idss) >= 5:
					next_keyboard = types.InlineKeyboardButton(text = "‚û°Ô∏è–î–∞–ª–µ–µ‚û°Ô∏è", callback_data = "b_nextPage|" + str(remover + 5))
					number_keyboard = types.InlineKeyboardButton(text = str(remover)[:1], callback_data = ".....")
					previous_keyboard = types.InlineKeyboardButton(text = "‚¨ÖÔ∏è–ù–∞–∑–∞–¥‚¨ÖÔ∏è", callback_data = "b_previousPage|" + str(remover - 5))
					keyboard.add(previous_keyboard, number_keyboard, next_keyboard)
				try:
					bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = "üéÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä: ",
									reply_markup = keyboard)
				except requests.exceptions.ConnectionError:
					bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = "üéÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä: ",
									reply_markup = keyboard)
			except IndexError:
				pass
		if con:
			con.close()
	elif "buy_item_" in call.data:
		msg = int(call.data[9:])
		IdItems = 0
		randomChar = [random.randint(1, 9)]
		randomFake = [random.randint(9999, 999999999999)]
		randomNumber = [random.randint(9999, 999999999999)]
		with sqlite3.connect("shopBD.sqlite", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
			cur = con.cursor()
			cur.execute("SELECT * FROM qiwi")
			sendNumber = cur.execute("SELECT * FROM qiwi").fetchall()[0][0]
		if con:
			con.close()
		with sqlite3.connect("shopBD.sqlite", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
			cur = con.cursor()
			cur.execute("SELECT * FROM items")
			while True:
				row = cur.fetchone()
				if row == None:
					break
				if msg == row[0]:
					sendItemsAmmo = row[3]
					IdItems = row[0]
		if con:
			con.close()
		if IdItems != 0:
			sendComment  = "{0}|{1}.{2}.{3}.{4}".format(call.from_user.id, IdItems, randomNumber[0], randomChar[0], randomFake[0])
			sendRequests = "https://qiwi.com/payment/form/99?extra%5B%27account%27%5D={0}&amountInteger={1}&amountFraction=0&extra%5B%27comment%27%5D={2}&currency=643&blocked%5B0%5D=sum&blocked%5B1%5D=comment&blocked%5B2%5D=account".format(sendNumber, sendItemsAmmo, sendComment)
			sendMessage  = "üì¶ *–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞*\nü•ù –î–ª—è –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n*ü•ù –ú–µ–Ω—è—Ç—å –ø–æ–ª—è –ù–ï –ù–£–ñ–ù–û*, –≤—Å—ë —É–∂–µ —É–∫–∞–∑–∞–Ω–æ.\n`(–°—Å—ã–ª–∫—É –Ω—É–∂–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä, –∞ –Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ QIWI)`\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nüîÖ *–ù–æ–º–µ—Ä:* `{0}`\nüîÖ *–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π:* `{1}`\nüîÖ *–°—É–º–º–∞:* `{2}`\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nüîÑ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É `–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É`".format(sendNumber, sendComment, sendItemsAmmo)
			check_keyboard = types.InlineKeyboardMarkup()
			check_keyboard.add(types.InlineKeyboardButton(text = "üåê –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url = sendRequests))
			check_keyboard.add(types.InlineKeyboardButton(text = "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data = f"checkPay|{randomNumber[0]}|{sendItemsAmmo}"))
			try:
				if len(str(sendNumber)) < 5:
					try:
						bot.send_message(call.message.chat.id, "‚ùå –ò–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞,\n–æ–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.", parse_mode = "MARKDOWN")
						if len(admin_id) > 1:
							for a in range(len(admin_id)):
								try:
									bot.send_message(admin_id[a], "‚ùóÔ∏è –û–ø–ª–∞—Ç–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å—Ä–æ—á–Ω–æ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–µ QIWI –¥–∞–Ω–Ω—ã–µ ‚ùóÔ∏è")
								except requests.exceptions.ConnectionError:
									bot.send_message(admin_id[a], "‚ùóÔ∏è –û–ø–ª–∞—Ç–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å—Ä–æ—á–Ω–æ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–µ QIWI –¥–∞–Ω–Ω—ã–µ ‚ùóÔ∏è")
						else:
							try:
								bot.send_message(admin_id[0], "‚ùóÔ∏è –û–ø–ª–∞—Ç–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å—Ä–æ—á–Ω–æ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–µ QIWI –¥–∞–Ω–Ω—ã–µ ‚ùóÔ∏è")
							except requests.exceptions.ConnectionError:
								bot.send_message(admin_id[0], "‚ùóÔ∏è –û–ø–ª–∞—Ç–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å—Ä–æ—á–Ω–æ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–µ QIWI –¥–∞–Ω–Ω—ã–µ ‚ùóÔ∏è")
					except requests.exceptions.ConnectionError:
						bot.send_message(call.message.chat.id, "‚ùå –ò–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞,\n–æ–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.", parse_mode = "MARKDOWN")
						if len(admin_id) > 1:
							for a in range(len(admin_id)):
								try:
									bot.send_message(admin_id[a], "‚ùóÔ∏è –û–ø–ª–∞—Ç–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å—Ä–æ—á–Ω–æ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–∏–≤–∏ –¥–∞–Ω–Ω—ã–µ ‚ùóÔ∏è")
								except requests.exceptions.ConnectionError:
									bot.send_message(admin_id[a], "‚ùóÔ∏è –û–ø–ª–∞—Ç–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å—Ä–æ—á–Ω–æ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–∏–≤–∏ –¥–∞–Ω–Ω—ã–µ ‚ùóÔ∏è")
						else:
							try:
								bot.send_message(admin_id[0], "‚ùóÔ∏è –û–ø–ª–∞—Ç–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å—Ä–æ—á–Ω–æ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–∏–≤–∏ –¥–∞–Ω–Ω—ã–µ ‚ùóÔ∏è")
							except requests.exceptions.ConnectionError:
								bot.send_message(admin_id[0], "‚ùóÔ∏è –û–ø–ª–∞—Ç–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å—Ä–æ—á–Ω–æ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–∏–≤–∏ –¥–∞–Ω–Ω—ã–µ ‚ùóÔ∏è")
				else:
					try:
						bot.send_message(call.message.chat.id, sendMessage, parse_mode = "MARKDOWN", reply_markup = check_keyboard)
					except requests.exceptions.ConnectionError:
						bot.send_message(call.message.chat.id, sendMessage, parse_mode = "MARKDOWN", reply_markup = check_keyboard)
			except ValueError:
				try:
					bot.send_message(call.message.chat.id, "‚ùå –ò–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞,\n–æ–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.", parse_mode = "MARKDOWN")
				except requests.exceptions.ConnectionError:
					bot.send_message(call.message.chat.id, "‚ùå –ò–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞,\n–æ–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.", parse_mode = "MARKDOWN")
			
		else:
			try:
				bot.send_message(call.message.chat.id, "‚ùóÔ∏è –î–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.", parse_mode = "MARKDOWN", reply_markup = admin_keyboard)
			except requests.exceptions.ConnectionError:
				bot.send_message(call.message.chat.id, "‚ùóÔ∏è –î–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.", parse_mode = "MARKDOWN", reply_markup = admin_keyboard)
	elif call.data.startswith("checkPay"):
		msg = call.data[9:]
		msg = msg.split("|")
		getCommentQiwi	= []
		getAmountQiwi	= []
		getReceintQiwi	= []
		getDateQiwi		= []
		getNomerQiwi	= []
		getItems		= 0
		sendBuy			= 0
		with sqlite3.connect("shopBD.sqlite", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
			cur = con.cursor()
			checkQiwi = cur.execute("SELECT * FROM qiwi").fetchall()[0]
		if con:
			con.close()
		request = requests.Session()
		request.headers["authorization"] = "Bearer " + checkQiwi[1]
		parameters = {"rows": 10, "operation" : "IN"}
		selectQiwi = request.get("https://edge.qiwi.com/payment-history/v2/persons/" + checkQiwi[0] + "/payments", params = parameters)
		selectQiwi = selectQiwi.json()["data"]
		for a in range(len(selectQiwi)):
			getCommentQiwi.append(selectQiwi[a]["comment"])
			getAmountQiwi.append(selectQiwi[a]["sum"]["amount"])
			getReceintQiwi.append(selectQiwi[a]["txnId"])
			getDateQiwi.append(selectQiwi[a]["date"])
			getNomerQiwi.append(selectQiwi[a]["personId"])
		allCheck   = False
		yesOrNo    = True
		howChar    = 0
		getBalance = 0
		for b in range(len(getCommentQiwi)):
			if str(msg[0]) in str(getCommentQiwi[b]) and str(msg[1]) in str(getAmountQiwi[b]):
				howChar = b
				allCheck = True
				getPayer      = getCommentQiwi[b].split("|")
				getIdPayer    = getPayer[0]
				getDataPayer  = []
				tempDataPayer = getPayer[1].split(".")
				getDataPayer.append(tempDataPayer[0])
				getDataPayer.append(tempDataPayer[1])
				break
		if allCheck:
			splitComment = getCommentQiwi[b].split("|")
			with sqlite3.connect("shopBD.sqlite", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
				cur = con.cursor()
				getBuyers = cur.execute("SELECT * FROM buyers").fetchall()
			if con:
				con.close()
			for c in range(len(getBuyers)):
				if str(getIdPayer) in str(getBuyers[c][0]) and str(splitComment[1]) in str(getBuyers[c][1]):
					yesOrNo = False
			if yesOrNo:
				with sqlite3.connect("shopBD.sqlite") as con:
					cur = con.cursor()
					getItems = cur.execute("SELECT * FROM items").fetchall()
				if con:
					con.close()
				for c in range(len(getItems)):
					if str(getDataPayer[0]) == str(getItems[c][0]):
						sendBuy = str(getItems[c][4])
				with sqlite3.connect("shopBD.sqlite", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
					cur = con.cursor()
					cur.executemany("INSERT INTO buyers(users, iditem, comment, amount, receipt, randomnum, data) VALUES (?, ?, ?, ?, ?, ?, ?)", [(splitComment[0], splitComment[1], getCommentQiwi[howChar], getAmountQiwi[howChar], getReceintQiwi[howChar], getDataPayer[1], getDateQiwi[howChar])])
				if con:
					con.close()
				with sqlite3.connect("shopBD.sqlite") as con:
					cur = con.cursor()
					cur.execute("DELETE FROM items WHERE id = ?", (int(getDataPayer[0]),))
				try:
					bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = "‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø–æ–∫—É–ø–∫—É. –ñ–¥—ë–º –≤–∞—Å —Å–Ω–æ–≤–∞.\n`{0}`".format(sendBuy))
					if len(admin_id) > 1:
						for a in range(len(admin_id)):
							bot.send_message(admin_id[a], f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –∫—É–ø–∏–ª —Ç–æ–≤–∞—Ä –Ω–∞ —Å—É–º–º—É {getAmountQiwi[howChar]} —Ä—É–±")
					else:
						bot.send_message(admin_id[0], f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –∫—É–ø–∏–ª —Ç–æ–≤–∞—Ä –Ω–∞ —Å—É–º–º—É {getAmountQiwi[howChar]} —Ä—É–±")
				except requests.exceptions.ConnectionError:
					bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = "‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø–æ–∫—É–ø–∫—É. –ñ–¥—ë–º –≤–∞—Å —Å–Ω–æ–≤–∞.\n`{0}`".format(sendBuy))
					if len(admin_id) > 1:
						for a in range(len(admin_id)):
							bot.send_message(admin_id[a], f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –∫—É–ø–∏–ª —Ç–æ–≤–∞—Ä –Ω–∞ —Å—É–º–º—É {getAmountQiwi[howChar]} —Ä—É–±")
					else:
						bot.send_message(admin_id[0], f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –∫—É–ø–∏–ª —Ç–æ–≤–∞—Ä –Ω–∞ —Å—É–º–º—É {getAmountQiwi[howChar]} —Ä—É–±")
			else:
				try:
					bot.send_message(call.from_user.id, "‚ùóÔ∏è –í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ —É–∂–µ –≤—ã–¥–∞–Ω–∞.")
				except requests.exceptions.ConnectionError:
					bot.send_message(call.from_user.id, "‚ùóÔ∏è –í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ —É–∂–µ –≤—ã–¥–∞–Ω–∞.")
		else:
			try:
				bot.send_message(call.from_user.id, "‚ùóÔ∏è –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.")
			except requests.exceptions.ConnectionError:
				bot.send_message(call.from_user.id, "‚ùóÔ∏è –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.")
####################################################################################################
#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
def add_item_name(message):
	global itemName
	itemName = message.text
	if itemName not in ignor_command:
		try:
			bot.send_message(message.from_user.id, "üìò –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
		except requests.exceptions.ConnectionError:
			bot.send_message(message.from_user.id, "üìò –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
		bot.register_next_step_handler(message, add_item_discription)

def add_item_discription(message):
	global itemDiscription
	itemDiscription = message.text
	if itemDiscription not in ignor_command:
		try:
			bot.send_message(message.from_user.id, "üìò –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞")
		except requests.exceptions.ConnectionError:
			bot.send_message(message.from_user.id, "üìò –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞")
		bot.register_next_step_handler(message, add_item_price)

def add_item_price(message):
	global itemPrice
	itemPrice = message.text
	if itemPrice not in ignor_command:
		try:
			bot.send_message(message.from_user.id, "üìò –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞")
		except requests.exceptions.ConnectionError:
			bot.send_message(message.from_user.id, "üìò –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞")
		bot.register_next_step_handler(message, add_item_data)

def add_item_data(message):
	global itemData
	itemData = message.text
	if itemData not in ignor_command:
		with sqlite3.connect("shopBD.sqlite", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
			cur = con.cursor()
			cur.executemany("INSERT INTO items (name, description, price, data) VALUES (?, ?, ?, ?)", [(itemName, itemDiscription, itemPrice, itemData)])
		if con:
			con.close()
		try:
			bot.send_message(message.from_user.id, "üìò –¢–æ–≤–∞—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
		except requests.exceptions.ConnectionError:
			bot.send_message(message.from_user.id, "üìò –¢–æ–≤–∞—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
####################################################################################################
#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
def add_items_name(message):
	global itemNames
	itemNames = message.text
	if itemNames not in ignor_command:
		try:
			bot.send_message(message.from_user.id, "üìó –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤")
		except requests.exceptions.ConnectionError:
			bot.send_message(message.from_user.id, "üìó –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤")
		bot.register_next_step_handler(message, add_items_discription)

def add_items_discription(message):
	global itemDiscriptions
	itemDiscriptions = message.text
	if itemDiscriptions not in ignor_command:
		try:
			bot.send_message(message.from_user.id, "üìó –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–æ–≤")
		except requests.exceptions.ConnectionError:
			bot.send_message(message.from_user.id, "üìó –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–æ–≤")
		bot.register_next_step_handler(message, add_items_price)

def add_items_price(message):
	global itemPrices
	itemPrices = message.text
	if itemPrices not in ignor_command:
		try:
			bot.send_message(message.from_user.id, "üìó –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å—Ç–æ–ª–±–∏–∫. –ü—Ä–∏–º–µ—Ä:\n`Login:Password`\n`Login:Password`\n`Login:Password`", parse_mode = "MARKDOWN")
		except requests.exceptions.ConnectionError:
			bot.send_message(message.from_user.id, "üìó –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å—Ç–æ–ª–±–∏–∫. –ü—Ä–∏–º–µ—Ä:\n`Login:Password`\n`Login:Password`\n`Login:Password`", parse_mode = "MARKDOWN")
		bot.register_next_step_handler(message, add_items_data)

def add_items_data(message):
	global itemDatas
	itemDatas = str(message.text)
	itemDatas = itemDatas.split("\n")
	counter	  = 0
	if itemDatas not in ignor_command:
		with sqlite3.connect("shopBD.sqlite", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
			cur = con.cursor()
			for a in range(len(itemDatas)):
				cur.executemany("INSERT INTO items (name, description, price, data) VALUES (?, ?, ?, ?)", [(itemNames, itemDiscriptions, itemPrices, itemDatas[a])])
				counter += 1
		if con:
			con.close()
		try:
			bot.send_message(message.from_user.id, f"üìò {counter} —Ç–æ–≤–∞—Ä–æ–≤ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
		except requests.exceptions.ConnectionError:
			bot.send_message(message.from_user.id, f"üìò {counter} —Ç–æ–≤–∞—Ä–æ–≤ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
####################################################################################################
#–û–±—ä—è–≤–ª–µ–Ω–∏–µ
def newAd(message):
	with sqlite3.connect("shopBD.sqlite", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
		cur = con.cursor()
		cur.execute("SELECT userid FROM users")
		userbase = []
		while True:
			try:
				row = cur.fetchone()[0]
				if row == None:
					break
				userbase.append(row)
			except:
				break
		if len(userbase) > 1:
			for z in range(len(userbase)):
				bot.send_message(userbase[z], "üí∞ *–û–±—ä—è–≤–ª–µ–Ω–∏–µ!*\n\n" + message.text, parse_mode = "MARKDOWN")
				time.sleep(1)
		else:
			bot.send_message(userbase[0], "üí∞ *–û–±—ä—è–≤–ª–µ–Ω–∏–µ!*\n\n" + message.text, parse_mode = "MARKDOWN")
	if con:
		con.close()
####################################################################################################
#–°–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–∞ FAQ
def change_faq(message):
	with sqlite3.connect("shopBD.sqlite", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
		cur = con.cursor()
		cur.execute("SELECT * FROM faq")
		while True:
			row = cur.fetchone()
			if row == None:
				break
			cur.execute("UPDATE faq SET infa = ? WHERE infa = ?", (message.text, row[0]))
	if con:
		con.close()
	try:
		bot.send_message(message.from_user.id, "üîò FAQ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
	except requests.exceptions.ConnectionError:
		bot.send_message(message.from_user.id, "üîò FAQ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
####################################################################################################
#–°–º–µ–Ω–∞ –∫–∏–≤–∏ –¥–∞–Ω–Ω—ã—Ö
def change_qiwi_number(message):
	try:
		bot.send_message(message.from_user.id, "ü•ù –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω QIWI API")
	except requests.exceptions.ConnectionError:
		bot.send_message(message.from_user.id, "ü•ù –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω QIWI API")
	bot.register_next_step_handler(message, change_qiwi_token)
	global qiwi_login
	qiwi_login = message.text

def change_qiwi_token(message):
	try:
		bot.send_message(message.from_user.id, "ü•ù –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö QIWI –¥–∞–Ω–Ω—ã—Ö...")
	except requests.exceptions.ConnectionError:
		bot.send_message(message.from_user.id, "ü•ù –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö QIWI –¥–∞–Ω–Ω—ã—Ö...")
	time.sleep(2)
	try:
		request = requests.Session()
		request.headers["authorization"] = "Bearer " + message.text  
		parameters = {"rows": 5, "operation" : "IN"}
		selectQiwi = request.get("https://edge.qiwi.com/payment-history/v2/persons/" + qiwi_login + "/payments", params = parameters)
		if selectQiwi.status_code == 200:	
			with sqlite3.connect("shopBD.sqlite", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as con:
				cur = con.cursor()
				cur.execute("SELECT * FROM qiwi")
				while True:
					row = cur.fetchone()
					if row == None:
						break
					cur.execute("UPDATE qiwi SET login = ?, token = ? WHERE login = ?", (qiwi_login, message.text, row[0]))
			if con:
				con.close()
			try:
				bot.delete_message(chat_id = message.chat.id, message_id = message.message_id + 1)
				bot.send_message(message.from_user.id, "‚úÖ QIWI —Ç–æ–∫–µ–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω")
			except requests.exceptions.ConnectionError:
				bot.delete_message(chat_id = message.chat.id, message_id = message.message_id + 1)
				bot.send_message(message.from_user.id, "‚úÖ QIWI —Ç–æ–∫–µ–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω")
		else:
			try:
				bot.delete_message(chat_id = message.chat.id, message_id = message.message_id + 1)
				bot.send_message(message.from_user.id, "‚ùå QIWI —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –ö–æ–¥ –æ—à–∏–±–∫–∏: " + str(selectQiwi.status_code))
			except requests.exceptions.ConnectionError:
				bot.delete_message(chat_id = message.chat.id, message_id = message.message_id + 1)
				bot.send_message(message.from_user.id, "‚ùå QIWI —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –ö–æ–¥ –æ—à–∏–±–∫–∏: " + str(selectQiwi.status_code))
	except:
		try:
			bot.delete_message(chat_id = message.chat.id, message_id = message.message_id + 1)
			bot.send_message(message.from_user.id, "‚ùå QIWI —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É.\n–í–≤–µ–¥—ë–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –≤–µ—Ä–Ω—ã")
		except requests.exceptions.ConnectionError:		
			bot.delete_message(chat_id = message.chat.id, message_id = message.message_id + 1)
			bot.send_message(message.from_user.id, "‚ùå QIWI —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É.\n–í–≤–µ–¥—ë–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –≤–µ—Ä–Ω—ã")
####################################################################################################
#–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—ã–ª–µ—Ç–æ–≤
if __name__ == "__main__":
	while True:
		try:
			print("BOT was started!")
			bot.polling(none_stop = True, interval = 0)
		except requests.exceptions.ConnectionError:
			print("–°–∫—Ä–∏–ø—Ç –ø–æ–ª—É—á–∏–ª –æ—à–∏–±–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è 'ConnectionError'")
			time.sleep(10)
